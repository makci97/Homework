#include <ctype.h>
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <string.h>

#define check_null(x) if(x == NULL){perror("Bad alloc\n"); exit(1);}

//**************************************************************************************
//cat
//**************************************************************************************
void cat(int argc, char** argv)
{
    if(argc < 0)
        perror("Bad arguments\n");

    int BUFFER_SIZE = 64;
    char buffer[BUFFER_SIZE + 1];

    //file == stdin
    if(argc == 0)
    {
        int input_descriptor = 0;
        int output_descriptor = 1;
        int read_bytes;
        int written_bytes;

        while( (read_bytes = read(input_descriptor,buffer, BUFFER_SIZE)) > 0)
        {
            buffer[read_bytes] = '\0';
            written_bytes = write(output_descriptor, buffer, read_bytes);

            if(written_bytes != read_bytes)
            {
                perror("Can't write\n");
                exit(1);
            }
        }

        if(read_bytes < 0)
        {
            perror("Can't read\n");
            exit(1);
        }

    }
    else
    {
        for(int i = 0; i < argc; ++i)
        {
            if(argv[i] == NULL)
            {
                fprintf(stderr,"'%s' not found\n", argv[i]);
            }
            else
            {
               int input_descriptor = open(argv[i], O_RDONLY);
               if(input_descriptor < 0)
               {
                   perror("Can't open file\n");
                   exit(1);
               }

               int output_descriptor = 1;
               int read_bytes;
               int written_bytes;

               while( (read_bytes = read(input_descriptor,buffer, BUFFER_SIZE)) > 0)
               {
                   buffer[read_bytes] = '\0';
                   written_bytes = write(output_descriptor, buffer, read_bytes);

                   if(written_bytes != read_bytes)
                   {
                       perror("Can't write\n");
                       exit(1);
                   }
               }

               if(read_bytes < 0)
               {
                   perror("Can't read\n");
                   exit(1);
               }
            }
        }
    }
}


//**************************************************************************************
//wc
//**************************************************************************************
struct amount
{
    long int ch_amount;     //current amount chars
    long int w_amount;      //current amount words
    long int str_amount;	//current amount strings

};

void wc(int argc, char** argv)
{
    if(argc < 0)
        perror("Bad arguments\n");

    int is_stdin = 0;
    char ch[1];

    //stdin
    if(argc == 0)
    {
        ++argc;
        is_stdin = 1;
    }

    for(int i = 0; i < argc; ++i)
    {
        int input_descriptor = -1;

        if(is_stdin == 1)
        {
            input_descriptor = 0;
        }
        else if(argv[i] == NULL)
        {
            fprintf(stderr,"'%s' not found\n", argv[i]);
        }
        else
        {
           input_descriptor = open(argv[i], O_RDONLY);
        }

        if(input_descriptor < 0)
        {
            perror("Can't open file\n");
            exit(1);
        }

        int read_bytes;
        struct amount am;
        am.str_amount = 0;
        am.w_amount = 0;
        am.ch_amount = 0;
		int word = 0;      	//true when get one or more chars in a row

        while( (read_bytes = read(input_descriptor,ch, 1)) > 0)
        {
            //read all words
            if(*ch != EOF)
            {
                //new string
                if(*ch == '\n')
                {	
					if(word == 1)
					{
						++am.w_amount;
						word = 0;
					}
                    ++am.str_amount;
                    word = 0;
                }
                //add "ch" in "word"
                else if(!isspace(*ch) && *ch != '\n' && *ch != '\t')
                {
                    word = 1;
                }
                //add "word" in "all"
                else if(word == 1)
                {
                    ++am.w_amount;
                    word = 0;
                }
                ++am.ch_amount;
            }
        }

        if(read_bytes < 0)
        {
           perror("Can't read\n");
           exit(1);
        }
        
		//add last word
		if(word == 1)
		{
			++am.w_amount;
			word = 0;
		}
        printf("%li\t%li\t%li\n", am.str_amount, am.w_amount, am.ch_amount);
    }

}



//**************************************************************************************
//main
//**************************************************************************************
int main(int argc, char** argv)
{
    //printf("%s %s %i %i\n", argv[0], argv[1], argc, strcmp("cat", argv[1]));
    if(argc < 1)
    {
        perror("What are you want to run?\n");
        exit(1);
    }

    if(argv == NULL || argv[1] == NULL)
    {
        perror("argv == NULL");
        exit(1);
    }

    if(!strcmp("cat", argv[1]))
    {
        cat(argc - 2, argv+2);
    }
    else if(!strcmp("grep", argv[1]))
    {
    }
    else if(!strcmp("ls", argv[1]))
    {

    }
    else if(!strcmp("wc", argv[1]))
    {
        wc(argc - 2, argv+2);
    }
    else
    {
        fprintf(stderr,"Command:'%s' not found\n",argv[1]);
        exit(1);
    }

    return 0;
}






